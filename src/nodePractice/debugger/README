Debugger
Node.jsのデバッガクライアントはフル機能のデバッガではありませんが、
簡単なステップと検査が可能です。

`debugger;をスクリプトのソースコードに挿入すると、
コードのその位置にブレークポイントが有効になります：

`repl`コマンドを使用すると、コードをリモートで評価することができます。
`next`コマンドは、次の行に進みます。
`help`と入力すると、他のコマンドを見ることができます。

コマンドを入力せずにEnterキーを押すと、以前のデバッガコマンドが繰り返されます。

Watchers
デバッグ中に式と変数の値を見ることができます。
すべてのブレークポイントで、ウォッチャーリストの各式は、現在のコンテキストで評価され、
ブレークポイントのソースコードリストの直前に表示されます。

式の監視を開始するには、watch（ 'my_expression'）と入力します。
コマンドウォッチャーはアクティブウォッチャーを出力します。
ウォッチャーを削除するには、unwatch（ 'my_expression'）と入力します。

Command reference
Stepping
* cont, c - 実行を続ける
* next, n - 次のステップ
* step, s - ステップイン
* out, o - ステップアウト
* pause - 実行中のコードを一時停止する（開発者ツールの一時停止ボタンのように）

Breakpoints
* setBreakpoint(), sb() - 現在の行にブレークポイントを設定する
* setBreakpoint(line), sb(line) - 特定の行にブレークポイントを設定する
* setBreakpoint('fn()'), sb(...) - 関数本体の最初の文にブレークポイントを設定する
* setBreakpoint('script.js', 1), sb(...) - script.jsの最初の行にブレークポイントを設定する
* clearBreakpoint('script.js', 1), cb(...) - 1行目のscript.jsでブレークポイントをクリアする
まだロードされていないファイル（モジュール）にブレークポイントを設定することもできます：

Information
backtrace, bt -  現在の実行フレームのバックトレースを出力する
list(5) - 5行の文脈でスクリプトのソースコードを表示する（前後5行）
watch(expr) - ウォッチリストに式を追加する
unwatch(expr) - ウォッチリストから式を削除する
watchers - すべてのウォッチャーとその値をリストします（各ブレークポイントに自動的に表示されます）
repl - デバッグスクリプトのコンテキストでの評価のためにデバッガのreplを開く
exec expr - デバッグスクリプトのコンテキストで式を実行する

Execution control
run - スクリプトを実行する（デバッガの起動時に自動的に実行される）
restart - スクリプトの再起動
kill - スクリプト終了

Various
scripts - 読み込まれたすべてのスクリプトを一覧表示する
version - V8のバージョンを表示

Advanced Usage
デバッガを有効にしてアクセスするもう1つの方法は、
Node.jsを--debugコマンドラインフラグで開始するか、
既存のNode.jsプロセスにSIGUSR1を指定してシグナリングすることです。

このようにプロセスがデバッグモードに設定されると、
実行中のプロセスのpidに接続するか、
リスニングデバッガへのURI参照を介してNode.jsデバッガを使用してプロセスを検査できます。

node debug -p <pid> - pidを介してプロセスに接続します。
node debug <URI> - localhost:5858などのURIを介してプロセスに接続します。

V8 Inspector Integration for Node.js
注:これは実験的な機能です。

V8 Inspectorの統合により、
デバッグとプロファイリングのためにChrome DevToolsをNode.jsインスタンスに
アタッチすることができます。

V8インスペクタを有効にするには、
Node.jsアプリケーションの起動時に--inspectフラグを渡します。
そのフラグを持つカスタムポートを提供することもできます
（例:`--inspect=9222`はポート9222のDevTools接続を受け入れます。

アプリケーションコードの最初の行をブレークするには、
--inspectに加えて--debug-brkフラグを指定します。
